# 1. Traffic Light Controller  **--DONE**
Problem: Design a SystemVerilog module for a traffic light controller at a four-way intersection. The FSM should control lights for north-south and east-west directions, ensuring safe traffic management. Include pedestrian signals that request to cross, which must interrupt the normal traffic sequence when activated.

Specifications:

Use a three-color traffic light system (Red, Yellow, Green).
Pedestrian requests should be handled immediately after the current light cycle completes.
Implement timers for each light state.

2. Digital Lock System --DONE
Problem: Implement a digital lock FSM in SystemVerilog that requires a correct sequence of inputs to unlock. The lock should accept a 4-digit code, and each digit is input sequentially.

Specifications:

The FSM should return to the initial state upon a wrong entry at any point.
Once the correct sequence is entered, an "unlock" signal should be activated.
After unlocking, the system should reset if another input is received.

3. Vending Machine Controller  --DONE
Problem: Create a SystemVerilog module for a vending machine that accepts coins, selects products, and provides change. Use an FSM to handle various states such as waiting, collecting money, product selection, and change dispensing.

Specifications:

Support at least three different products with different prices.
Handle exact and excess money scenarios.
Provide a refund mechanism that can be triggered at any money-collecting state.

4. Elevator Control System  --DONE
Problem: Develop an FSM-based elevator control system in SystemVerilog that manages the movement of an elevator between four floors. Include features for calling the elevator to a floor and selecting a target floor from inside the elevator.

Specifications:

Implement states for moving up, moving down, idle, and emergency stop.
The elevator should efficiently decide the direction based on current and requested floors.
Include safety features like door opening only when the elevator is idle at a floor.

5. Serial Data Receiver  --DONE
Problem: Design a SystemVerilog module for an FSM-based serial data receiver that processes incoming data packets framed by start and stop bits. The FSM should verify the correctness of the packet format and handle errors.

Specifications:

Support a simple packet structure: start bit, 8 data bits, parity bit, stop bit.
Validate the parity and frame correctness.
On detecting errors, the FSM should signal an error state and discard the packet.
Guidelines for Implementation:
Each of these problems can be approached by defining the states clearly and deciding the transitions based on input conditions. Here are general steps to follow:

Identify States: Determine all the necessary states required for the FSM.
Define Transitions: Outline what conditions lead to state transitions.
Implement Actions: Specify the actions that occur in each state (e.g., outputs or internal calculations).
Simulate and Test: After designing the FSM, thoroughly test each scenario to ensure all states transition correctly and handle edge cases effectively.

6. Multi-level Car Parking System
Problem: Design a SystemVerilog module to control a multi-level car parking system. The FSM should manage entry and exit gates, parking space availability, and direct cars to the appropriate level based on space availability.

Specifications:

Multiple entry and exit points.
Sensors at each parking space to detect car presence.
Indicators for directing cars to levels where spaces are available.
Priority handling for VIP parking.
Emergency mode for evacuation.

7. Automated Production Line Control
Problem: Implement an FSM in SystemVerilog to control an automated production line that processes multiple product types. The FSM should manage different stages of production, such as assembly, quality check, packaging, and dispatch.

Specifications:

Different production paths based on product type.
Error handling for production faults.
Integration with inventory management for raw materials.
Handling of pause and resume features for maintenance.
Stages include feedback loops for quality assurance.

8. Network Packet Scheduler  --DONE
Problem: Create a SystemVerilog module for a network packet scheduler that uses an FSM to manage packet queuing and transmission based on priority and type. The FSM should handle different network conditions dynamically.

Specifications:

Multiple queues for different types of traffic (e.g., VoIP, streaming, data).
Dynamic adjustment based on bandwidth availability.
Error handling for packet loss or corruption.
States to manage congestion and optimize throughput.
Prioritization mechanism for critical data packets.

9. Smart Home Security System  --DONE
Problem: Develop an FSM-based smart home security system in SystemVerilog. The system should manage various sensors (motion, window/door, smoke) and make decisions based on the input from these devices.

Specifications:

Different security modes (armed, disarmed, away, night).
Immediate action on alarms with different protocols for each type of alert.
Integration with external services (police, fire department).
User interface states for setting up and configuring the system.
Logging and error handling states.

10. Autonomous Mobile Robot Navigation --DONE
Problem: Design a SystemVerilog module for an FSM controlling an autonomous mobile robot in a dynamic environment. The FSM should handle navigation, obstacle avoidance, and task completion, such as delivering items within a building.

Specifications: 

States for different navigation strategies based on sensor inputs.
Collision detection and avoidance states.
Task prioritization for handling multiple objectives.
Recovery states for dealing with system errors or malfunctions.
Power management states for battery conservation and recharging.
Implementation Tips:
State Complexity: Break down the system into manageable parts and define states for each part before integrating them.
Transitions Logic: Use conditions based on real-time inputs and internal flags to manage complex transitions.
Modular Design: Build each part of the FSM as a module to simplify testing and maintenance.
Simulation: Extensively simulate each FSM with various scenarios to ensure all states and transitions are handled as expected.

11. Accumulator --DONE
Design a simple FSM where the input is I_VALUE 4bit number and I_VALID, the I_VALUE will be accumulated until it gets a I_TERM signal to 
GIVE the accumulated output(O_SUM) and O_DONE signal .

12. Realtime ALU
Design a simple FSM where the current value at the register A needs tobe added,substracted, multiplied, divided based on the input I_INSTRUCTION(2bit), I_IN_DATA(8bit), I_VALID. The I_VALID will be high only when the O_READY is asserted. 

13. TEMPERATURE STABILIZER  --DONE
Design and implement a temperature control system in SystemVerilog for a server room. The system must use a hysteresis counter to efficiently manage the operation of cooling units, ensuring the temperature is maintained within a specific range to optimize server performance and reliability.

Specifications:

Temperature Monitoring: The system should continuously monitor the room temperature.

Hysteresis Control:

Upper Threshold (UT): If the temperature exceeds this value, the cooling units should be activated.
Lower Threshold (LT): Once activated, the cooling units should continue to operate until the temperature drops below this value. This prevents frequent toggling of the cooling units, reducing wear and tear.
Cooling Unit Control:

